ggplot(aes(x = variable, y = value)) +
geom_col(stat = "identity", fill = "skyblue", width = 0.5) +  # Adjust bar width
# Add text labels with round(value, 2) for 2 decimal places
geom_text(aes(label = round(value, 2), x = variable, y = value + 0.02),
vjust = -0.5, hjust = 1, size = 3, angle = 60) +  # Rotate text further
labs(title = "Proportion of Missing Values",
x = "Variable",
y = "Missing Proportion") +
# Adjust x-axis labels for readability (optional)
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(visdat) # visualización de datos
library(naniar)
vis_miss(base.ENGE_1993a2022.wider,sort_miss = T,cluster = T,warn_large_data = T)
names(df_pivot)
# summary(df_pivot$amortizaciones)
df_indicadores <-  df_pivot %>%
mutate(VAB.precios.basicos = VAB *((1 +impuestos.net.subsidios.en.VAB)/100),
amortizaciones = amortizaciones.en.VAB*VAB,
productividad_corrientes = VAB.precios.basicos / empleo.asalariado,
# - IPI = indice de precios implícitos del VAB por rama, año a definir, buscar en indec
# - Indice productividad (IPT) (en reales) = Productividad corrientes / IPI
masa_salarial = (salarios.en.VAB/100)*VAB.precios.basicos,
consumo_intermedio = VBP-VAB.precios.basicos,
ganancia_antes_de_impuestos = VAB.precios.basicos - amortizaciones - masa_salarial,
# - Impuestos a las ganancias = buscar
ganancia_despues_impuestos = VAB.precios.basicos - amortizaciones - masa_salarial,# - impuestos a las ganancias
activo_corriente = act.corriente.sobre.act.total*activo,
activo_no_corriente = activo-activo_corriente,
stock_de_capital = (amortizaciones.en.VAB*VAB)*0.06,
indice_consumo_capital_fijo= amortizaciones/activo_no_corriente,
rotacion_capital_aproximada = (amortizaciones + masa_salarial + consumo_intermedio)/activo_corriente,
capital_variable_adelantado = masa_salarial / rotacion_capital_aproximada,
capital_constante_circulante_adelantado = consumo_intermedio / rotacion_capital_aproximada,
tasa_de_ganancia = result.oper / (capital_variable_adelantado + capital_constante_circulante_adelantado + stock_de_capital)
)
df_indicadores
# Write the data frame to a CSV file
write.csv(df_indicadores, file = 'enge_indicadores.csv', row.names = FALSE)
df_indicadores
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# No usar notación científica.
options(scipen = 999)
# LOCALE EN ESPAÑOL (símbolos, fechas):
# En Mac suele funcionar la opción que marca Segasi:
Sys.setlocale("LC_ALL", "es_ES.UTF-8")
# En Windows/Linux suele funcionar esta función:
Sys.setlocale("LC_ALL","Spanish")
#Traigo conjunto de librerías que suelo usar al espacio de trabajo
library("tidyverse")
library("openxlsx")
library("ggplot2")
library("ggthemes")
library("GGally")
library("scales")
library("dplyr")
library("kableExtra")
library('ggrepel')
library('ggalt')
library('GGally')
library('ggridges')
library('fs')
library('purrr')
library('rmarkdown')
library('esquisse')
library('treemapify')
library('viridis')
library("tinytex")
#Levanto las hojas del excel por separado correspondiente a las distintas presentaciones de la ENGE en cada periodo
ENGE_1993a2004 <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 1)
ENGE_2004a2011 <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 2)
ENGE_2012a2016 <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 3)
ENGE_2017a2022 <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 4)
#Unión con merge según modo de presentación compatible
## Del 93 al 2011 el conjunto de sectores es un poco más acotado
ENGE_1993a2011 <- merge(x = ENGE_1993a2004,
y = ENGE_2004a2011,
all = T)
## Del 2012 en adelante se apmlía la desagregación de sectores
ENGE_2012a2022 <- merge(x = ENGE_2012a2016,
y = ENGE_2017a2022,
all = T)
#Quito las que ya no uso
rm(ENGE_1993a2004,ENGE_2004a2011,ENGE_2012a2016,ENGE_2017a2022)
#Levanto la tabla con la desagregación sectorial
sectores <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 7)
sectores %>% kbl(caption = "Cuadro 1. Desagregación sectorial por periodo") %>%
kable_classic(full_width = F, html_font = "Cambria")
#según el modo de presentación compatible con bind_rows()
##1993 a 2011, id =1
##2012 a 2022, id = 2
help(bind_rows)
base.ENGE_1993a2022.bind <- bind_rows(list(ENGE_1993a2011,ENGE_2012a2022), .id = "id")
#Exportar a excel la base única con todas los sectores como columnas con el identificador de compatibilidad sectorial (id)
write.xlsx(base.ENGE_1993a2022.bind,"Output/base.ENGE_1993a2022_wider.id.xlsx")
#Pivoteo
base.ENGE_1993a2022.bind <- base.ENGE_1993a2022.bind %>%
pivot_longer(cols = 5:29,
names_to = "sector",
values_to = "valor")
#Exportar a excel base pivoteada de todos los sectores en una sola columna con el identificador de compatibilidad sectorial (id)
write.xlsx(base.ENGE_1993a2022.bind,"Output/base.ENGE_1993a2022_longer.id.xlsx")
df_enge = base.ENGE_1993a2022.bind
head(df_enge)
prop_missing <- apply(is.na(df_enge), 2, function(x) sum(x) / nrow(df_enge))
prop_missing
# df_enge <-  df_enge%>%
#   filter(!is.na(valor))
table(df_enge$unidad)
df_homogeneo <- df_enge %>%
rbind(df_enge %>%
filter(unidad == "pesos.millones") %>%
mutate(valor = valor * 1e6,
unidad = 'pesos')
) %>%
rbind(df_enge %>%
filter(unidad == "pesosmiles") %>%
mutate(valor = valor * 1e3,
unidad = 'pesos')
) %>%
filter(  !(unidad  %in% c("pesos.millones", "pesosmiles")) )
print(table(df_homogeneo$unidad))
print('cantidad de filas iguales?')
print(nrow (df_homogeneo) == nrow (df_enge))
tail (df_homogeneo)
df_pesos <- df_homogeneo %>% filter(unidad %in% c("pesos"))
# Get unique values of "indicador"
unique_indicadores_pesos <- unique(df_pesos$indicador)
unique_indicadores_pesos
# Group by 'anio' and count the number of unique 'indicador' values in each group
df_grouped <- df_pesos %>%
group_by(anio) %>%
summarise(count = n_distinct(indicador)) %>%
arrange(count)
print(df_grouped)
# Assuming your dataframes are called 'df_homogeneo' and 'df_pesos' (as defined earlier)
# Efficiently compare unique indicators with indicators in each year
missing_indicators_by_year <- function(unique_indicators, df_grouped) {
missing_indicators <- sapply(df_grouped$anio, function(year) {
# Filter indicators for the current year
year_indicators <- df_homogeneo %>%
filter(anio == year & unidad %in% c("pesos")) %>%
pull(indicador)  # Extract only 'indicador' values
# Find missing indicators in the current year
missing <- setdiff(unique_indicators, year_indicators)
return(paste(missing, collapse = ", "))  # Combine missing indicators with comma
})
# Combine missing indicators from all years into a data frame
missing_indicators_df <- data.frame(anio = df_grouped$anio, missing_variables = missing_indicators)
return(missing_indicators_df)
}
# Get the missing indicators by year
missing_indicators_by_year <- missing_indicators_by_year(unique_indicadores_pesos, df_grouped)
# Print the missing indicators by year (desired format)
print(missing_indicators_by_year)
see_unique_unidades <- function(df, unidades){
df_filtered <- df %>% filter(unidad %in% unidades)
# Get unique values of "indicador"
unique_indicadores <- unique(df_filtered$indicador)
unique_indicadores
}
cat('coeficiente\n')
see_unique_unidades(df_enge, 'coeficiente')
cat('\nporciento\n')
see_unique_unidades(df_enge, 'porciento')
filtered_indices <- which(grepl(".sobre.", df_enge$indicador))
# Filter the dataframe using the indices
df_filtered <- df_enge[filtered_indices, ]
unique(df_filtered$indicador)
df_enge %>%
filter(str_detect(indicador, "\\.sobre")) %>%
count(unidad, indicador)
#Reestructuro la base pivoteando los indicadores en columnas como variable separadas
# base.ENGE_1993a2022.wider <- base.ENGE_1993a2022.bind %>%
#   pivot_wider(names_from  = c(indicador,unidad),
#               names_sep = "_",
#               values_from = valor)
#problema de que me convirtió los vectores en listas
#Buscar alguna manera de reemplazar los NULL por NA
df_pivot <- df_homogeneo %>%
filter(unidad %in% c("pesos", "cantidad") | indicador %in% c(
"salarios.en.VAB", "impuestos.net.subsidios.en.VAB",
"act.corriente.sobre.act.total", "amortizaciones.en.VAB"
)) %>%
select(-unidad) %>%
group_by(anio, sector, indicador) %>%
# mutate(id=row_number())
summarise(valor = sum(valor, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = indicador, values_from = valor)
# unite("id", indicador, anio, sector, remove = FALSE) %>%
# pivot_wider(names_from = indicador,
#             values_from = valor,
#             values_fn = list(valor = ~ first(.x))) %>%
# select(-id)
# # unnest_wider(valor, names_from = indicador)
# pivot_wider(names_from = indicador,
#             values_from = valor,
#             values_fn = list(valor = unlist)) %>%
# unnest(cols = everything())
# summary(df_pivot)
glimpse(df_pivot)
data_missing <- df_pivot %>%
# Summarize missing values (is.na) for each column
summarize(across(.fns = ~mean(is.na(.x)))) %>%
# summarize(across(.fns = ~sum(is.na(.x))/nrow(.x)))
reshape2::melt()
data_missing
# Assuming your data is in a variable named 'data'
data_missing %>%
# Reshape data for ggplot2
# pivot_longer(names = "variable", values_from = "value", values_def = last()) %>%
# Create bar chart with ggplot2
ggplot(aes(x = variable, y = value)) +
geom_col(stat = "identity", fill = "skyblue", width = 0.5) +  # Adjust bar width
# Add text labels with round(value, 2) for 2 decimal places
geom_text(aes(label = round(value, 2), x = variable, y = value + 0.02),
vjust = -0.5, hjust = 1, size = 3, angle = 60) +  # Rotate text further
labs(title = "Proportion of Missing Values",
x = "Variable",
y = "Missing Proportion") +
# Adjust x-axis labels for readability (optional)
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(visdat) # visualización de datos
library(naniar)
vis_miss(base.ENGE_1993a2022.wider,sort_miss = T,cluster = T,warn_large_data = T)
names(df_pivot)
# summary(df_pivot$amortizaciones)
df_indicadores <-  df_pivot %>%
mutate(VAB.precios.basicos = VAB *((1 +impuestos.net.subsidios.en.VAB)/100),
amortizaciones = amortizaciones.en.VAB*VAB,
productividad_corrientes = VAB.precios.basicos / empleo.asalariado,
# - IPI = indice de precios implícitos del VAB por rama, año a definir, buscar en indec
# - Indice productividad (IPT) (en reales) = Productividad corrientes / IPI
masa_salarial = (salarios.en.VAB/100)*VAB.precios.basicos,
consumo_intermedio = VBP-VAB.precios.basicos,
ganancia_antes_de_impuestos = VAB.precios.basicos - amortizaciones - masa_salarial,
# - Impuestos a las ganancias = buscar
ganancia_despues_impuestos = VAB.precios.basicos - amortizaciones - masa_salarial,# - impuestos a las ganancias
activo_corriente = act.corriente.sobre.act.total*activo,
activo_no_corriente = activo-activo_corriente,
stock_de_capital = (amortizaciones.en.VAB*VAB)*0.06,
indice_consumo_capital_fijo= amortizaciones/activo_no_corriente,
rotacion_capital_aproximada = (amortizaciones + masa_salarial + consumo_intermedio)/activo_corriente,
capital_variable_adelantado = masa_salarial / rotacion_capital_aproximada,
capital_constante_circulante_adelantado = consumo_intermedio / rotacion_capital_aproximada,
tasa_de_ganancia = result.oper / (capital_variable_adelantado + capital_constante_circulante_adelantado + stock_de_capital)
)
df_indicadores
# Write the data frame to a CSV file
write.csv(df_indicadores, file = 'enge_indicadores.csv', row.names = FALSE)
# summary(df_indicadores)
unique(df_indicadores$sector)
#Hago algunos cálculo de prueba con lo que ya tengo
base.ENGE_1993a2022.wider <- base.ENGE_1993a2022.wider %>%
mutate(VAB.precios.basicos = VAB_pesos.millones*((1 +impuestos.net.subsidios.en.VAB_porciento)/100))
View(data_missing)
View(df_filtered)
View(missing_indicators_by_year)
View(sectores)
View(df_homogeneo)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# No usar notación científica.
options(scipen = 999)
# LOCALE EN ESPAÑOL (símbolos, fechas):
# En Mac suele funcionar la opción que marca Segasi:
Sys.setlocale("LC_ALL", "es_ES.UTF-8")
# En Windows/Linux suele funcionar esta función:
Sys.setlocale("LC_ALL","Spanish")
#Traigo conjunto de librerías que suelo usar al espacio de trabajo
library("tidyverse")
library("openxlsx")
library("ggplot2")
library("ggthemes")
library("GGally")
library("scales")
library("dplyr")
library("kableExtra")
library('ggrepel')
library('ggalt')
library('GGally')
library('ggridges')
library('fs')
library('purrr')
library('rmarkdown')
library('esquisse')
library('treemapify')
library('viridis')
library("tinytex")
#Levanto las hojas del excel por separado correspondiente a las distintas presentaciones de la ENGE en cada periodo
ENGE_1993a2004 <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 1)
ENGE_2004a2011 <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 2)
ENGE_2012a2016 <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 3)
ENGE_2017a2022 <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 4)
#Unión con merge según modo de presentación compatible
## Del 93 al 2011 el conjunto de sectores es un poco más acotado
ENGE_1993a2011 <- merge(x = ENGE_1993a2004,
y = ENGE_2004a2011,
all = T)
## Del 2012 en adelante se apmlía la desagregación de sectores
ENGE_2012a2022 <- merge(x = ENGE_2012a2016,
y = ENGE_2017a2022,
all = T)
#Quito las que ya no uso
rm(ENGE_1993a2004,ENGE_2004a2011,ENGE_2012a2016,ENGE_2017a2022)
#Levanto la tabla con la desagregación sectorial
sectores <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 7)
sectores %>% kbl(caption = "Cuadro 1. Desagregación sectorial por periodo") %>%
kable_classic(full_width = F, html_font = "Cambria")
#según el modo de presentación compatible con bind_rows()
##1993 a 2011, id =1
##2012 a 2022, id = 2
help(bind_rows)
base.ENGE_1993a2022.bind <- bind_rows(list(ENGE_1993a2011,ENGE_2012a2022), .id = "id")
#Exportar a excel la base única con todas los sectores como columnas con el identificador de compatibilidad sectorial (id)
write.xlsx(base.ENGE_1993a2022.bind,"Output/base.ENGE_1993a2022_wider.id.xlsx")
#Pivoteo
base.ENGE_1993a2022.bind <- base.ENGE_1993a2022.bind %>%
pivot_longer(cols = 5:29,
names_to = "sector",
values_to = "valor")
#Exportar a excel base pivoteada de todos los sectores en una sola columna con el identificador de compatibilidad sectorial (id)
write.xlsx(base.ENGE_1993a2022.bind,"Output/base.ENGE_1993a2022_longer.id.xlsx")
df_enge = base.ENGE_1993a2022.bind
head(df_enge)
prop_missing <- apply(is.na(df_enge), 2, function(x) sum(x) / nrow(df_enge))
prop_missing
# df_enge <-  df_enge%>%
#   filter(!is.na(valor))
table(df_enge$unidad)
df_homogeneo <- df_enge %>%
rbind(df_enge %>%
filter(unidad == "pesos.millones") %>%
mutate(valor = valor * 1e6,
unidad = 'pesos')
) %>%
rbind(df_enge %>%
filter(unidad == "pesos.miles") %>%
mutate(valor = valor * 1e3,
unidad = 'pesos')
) %>%
filter(  !(unidad  %in% c("pesos.millones", "pesosmiles")) )
print(table(df_homogeneo$unidad))
print('cantidad de filas iguales?')
print(nrow (df_homogeneo) == nrow (df_enge))
tail (df_homogeneo)
df_pesos <- df_homogeneo %>% filter(unidad %in% c("pesos"))
# Get unique values of "indicador"
unique_indicadores_pesos <- unique(df_pesos$indicador)
unique_indicadores_pesos
# Group by 'anio' and count the number of unique 'indicador' values in each group
df_grouped <- df_pesos %>%
group_by(anio) %>%
summarise(count = n_distinct(indicador)) %>%
arrange(count)
print(df_grouped)
# Assuming your dataframes are called 'df_homogeneo' and 'df_pesos' (as defined earlier)
# Efficiently compare unique indicators with indicators in each year
missing_indicators_by_year <- function(unique_indicators, df_grouped) {
missing_indicators <- sapply(df_grouped$anio, function(year) {
# Filter indicators for the current year
year_indicators <- df_homogeneo %>%
filter(anio == year & unidad %in% c("pesos")) %>%
pull(indicador)  # Extract only 'indicador' values
# Find missing indicators in the current year
missing <- setdiff(unique_indicators, year_indicators)
return(paste(missing, collapse = ", "))  # Combine missing indicators with comma
})
# Combine missing indicators from all years into a data frame
missing_indicators_df <- data.frame(anio = df_grouped$anio, missing_variables = missing_indicators)
return(missing_indicators_df)
}
# Get the missing indicators by year
missing_indicators_by_year <- missing_indicators_by_year(unique_indicadores_pesos, df_grouped)
# Print the missing indicators by year (desired format)
print(missing_indicators_by_year)
see_unique_unidades <- function(df, unidades){
df_filtered <- df %>% filter(unidad %in% unidades)
# Get unique values of "indicador"
unique_indicadores <- unique(df_filtered$indicador)
unique_indicadores
}
cat('coeficiente\n')
see_unique_unidades(df_enge, 'coeficiente')
cat('\nporciento\n')
see_unique_unidades(df_enge, 'porciento')
filtered_indices <- which(grepl(".sobre.", df_enge$indicador))
# Filter the dataframe using the indices
df_filtered <- df_enge[filtered_indices, ]
unique(df_filtered$indicador)
df_enge %>%
filter(str_detect(indicador, "\\.sobre")) %>%
count(unidad, indicador)
#Reestructuro la base pivoteando los indicadores en columnas como variable separadas
# base.ENGE_1993a2022.wider <- base.ENGE_1993a2022.bind %>%
#   pivot_wider(names_from  = c(indicador,unidad),
#               names_sep = "_",
#               values_from = valor)
#problema de que me convirtió los vectores en listas
#Buscar alguna manera de reemplazar los NULL por NA
df_pivot <- df_homogeneo %>%
filter(unidad %in% c("pesos", "cantidad") | indicador %in% c(
"salarios.en.VAB", "impuestos.net.subsidios.en.VAB",
"act.corriente.sobre.act.total", "amortizaciones.en.VAB"
)) %>%
select(-unidad) %>%
group_by(anio, sector, indicador) %>%
# mutate(id=row_number())
summarise(valor = sum(valor, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = indicador, values_from = valor)
# unite("id", indicador, anio, sector, remove = FALSE) %>%
# pivot_wider(names_from = indicador,
#             values_from = valor,
#             values_fn = list(valor = ~ first(.x))) %>%
# select(-id)
# # unnest_wider(valor, names_from = indicador)
# pivot_wider(names_from = indicador,
#             values_from = valor,
#             values_fn = list(valor = unlist)) %>%
# unnest(cols = everything())
# summary(df_pivot)
glimpse(df_pivot)
data_missing <- df_pivot %>%
# Summarize missing values (is.na) for each column
summarize(across(.fns = ~mean(is.na(.x)))) %>%
# summarize(across(.fns = ~sum(is.na(.x))/nrow(.x)))
reshape2::melt()
data_missing
# Assuming your data is in a variable named 'data'
data_missing %>%
# Reshape data for ggplot2
# pivot_longer(names = "variable", values_from = "value", values_def = last()) %>%
# Create bar chart with ggplot2
ggplot(aes(x = variable, y = value)) +
geom_col(stat = "identity", fill = "skyblue", width = 0.5) +  # Adjust bar width
# Add text labels with round(value, 2) for 2 decimal places
geom_text(aes(label = round(value, 2), x = variable, y = value + 0.02),
vjust = -0.5, hjust = 1, size = 3, angle = 60) +  # Rotate text further
labs(title = "Proportion of Missing Values",
x = "Variable",
y = "Missing Proportion") +
# Adjust x-axis labels for readability (optional)
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(visdat) # visualización de datos
library(naniar)
vis_miss(base.ENGE_1993a2022.wider,sort_miss = T,cluster = T,warn_large_data = T)
names(df_pivot)
# summary(df_pivot$amortizaciones)
df_indicadores <-  df_pivot %>%
mutate(VAB.precios.basicos = VAB *((1 +impuestos.net.subsidios.en.VAB)/100),
amortizaciones = amortizaciones.en.VAB*VAB,
productividad_corrientes = VAB.precios.basicos / empleo.asalariado,
# - IPI = indice de precios implícitos del VAB por rama, año a definir, buscar en indec
# - Indice productividad (IPT) (en reales) = Productividad corrientes / IPI
masa_salarial = (salarios.en.VAB/100)*VAB.precios.basicos,
consumo_intermedio = VBP-VAB.precios.basicos,
ganancia_antes_de_impuestos = VAB.precios.basicos - amortizaciones - masa_salarial,
# - Impuestos a las ganancias = buscar
ganancia_despues_impuestos = VAB.precios.basicos - amortizaciones - masa_salarial,# - impuestos a las ganancias
activo_corriente = act.corriente.sobre.act.total*activo,
activo_no_corriente = activo-activo_corriente,
stock_de_capital = (amortizaciones.en.VAB*VAB)*0.06,
indice_consumo_capital_fijo= amortizaciones/activo_no_corriente,
rotacion_capital_aproximada = (amortizaciones + masa_salarial + consumo_intermedio)/activo_corriente,
capital_variable_adelantado = masa_salarial / rotacion_capital_aproximada,
capital_constante_circulante_adelantado = consumo_intermedio / rotacion_capital_aproximada,
tasa_de_ganancia = result.oper / (capital_variable_adelantado + capital_constante_circulante_adelantado + stock_de_capital)
)
df_indicadores
# Write the data frame to a CSV file
write.csv(df_indicadores, file = 'enge_indicadores.csv', row.names = FALSE)
# summary(df_indicadores)
unique(df_indicadores$sector)
#Hago algunos cálculo de prueba con lo que ya tengo
#base.ENGE_1993a2022.wider <- base.ENGE_1993a2022.wider %>%
# mutate(VAB.precios.basicos = VAB_pesos.millones*((1 +impuestos.net.subsidios.en.VAB_porciento)/100))
#class(base.ENGE_1993a2022.wider$amortizaciones.en.VAB_porciento)
#Levanto la tabla con el glosario completo de indicadores, sectores y origen del capital
glosario <- openxlsx::read.xlsx(
xlsxFile = "Fuentes/0. resumen_macro_eco-finan_enge_1993-2022_Yacovone.v2.2.1.xlsx",
sheet = 6)
#elaboro cuadro prolijo
glosario %>% kbl(caption = "Cuadro 2. Glosario completo de variables, sectores y origen del capital") %>%
kable_paper("hover", full_width = F)
